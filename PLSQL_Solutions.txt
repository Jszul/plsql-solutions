

------BASIC LOOKUP BY STRING------

Write a PL/SQL anonymous block that accepts a last name (LNAME) from the user input and displays employee’s information (LNAME, FNAME, EID, ESTATUS, ETYPE, and PILOT). Sort your output in ascending order by the name (LNAME, FNAME) and then EID.

-----Paramaters------

•	If the last name is NOT in the HR_EMPLOYEE table (LNAME), your program displays information about ALL employees.  
•	If the last name is in the HR_EMPLOYEE table (LNAME), your program displays the corresponding employee’s information. We have duplicate names in the HR_EMPLOYEE table. 
•	The name is not case sensitive (e.g., Jackson = JACKSON).  You will lose 10 points if you do not use the UPPER (or LOWER) function in your program.
•	The ETYPE (“FT” or “PT”) must be displayed as “Full-Time” or “Part-Time” in your output. You will lose 10 points if you fail to do so.
•	The ESTATUS (“AC” or “IN”) must be displayed as “Active” or “Inactive” in your output. You will lose 10 points if you fail to do so. 
•	You will lose 10 points if the title lines are missing in your output.
•	You will lose 10 points if your output is not in the correct format (e.g., wrong order of columns).
•	You can only use the HR_EMPLOYEE table. You will receive 0 points if you use other tables. 
•	You will receive 0 points if you submit more than one PL/SQL program. 


------Solution------

ACCEPT p_1 PROMPT 'Please enter the last name:'
declare 
        v_input         VARCHAR2(100) := '&p_1';
    cursor c_1 is 
        select      *
        from hr_employee
        order by lname, fname, eid;
    cursor c_2 is 
        select *
        from hr_employee
        where upper(lname) = upper(v_input)
        order by lname, fname, eid;
    v_type_format       VARCHAR2(100);
    v_status_format       VARCHAR2(100);
    v_emp_rec       c_1%rowtype;
    v_n             Number;

begin
    select count(*)
    into v_n
    from hr_employee
    where UPPER(lname) = upper(v_input);
    
    if v_n = 0 then
        DBMS_OUTPUT.PUT_LINE(upper(rpad('Full Name', 20) || rpad('Emp ID', 10) || rpad('Emp Status', 15) ||
            rpad('emp type',15) || rpad('pilot', 30)));
            DBMS_OUTPUT.PUT_LINE(rpad('-', 90, '-'));
        open c_1;
        loop
            fetch c_1 into v_emp_rec;
            exit when c_1%notfound;
            if v_emp_rec.etype = 'FT' then v_type_format := 'Full-Time'; end if; 
            if v_emp_rec.etype = 'PT' then v_type_format := 'Part-Time'; end if; 
            if v_emp_rec.estatus = 'AC' then v_status_format := 'Active'; end if; 
            if v_emp_rec.estatus = 'IN' then v_status_format := 'Inactive'; end if; 
            DBMS_OUTPUT.PUT_LINE(rpad(v_emp_rec.lname || ', ' || v_emp_rec.fname, 20) || rpad(v_emp_rec.eid, 10) 
            || rpad(v_status_format, 15)  || rpad(v_type_format,15) || rpad(v_emp_rec.pilot, 30));
        end loop;
        close c_1;
    else 
    DBMS_OUTPUT.PUT_LINE(upper(rpad('Full Name', 20) || rpad('Emp ID', 10) || rpad('Emp Status', 15) ||
        rpad('emp type',15) || rpad('pilot', 30)));
        DBMS_OUTPUT.PUT_LINE(rpad('-', 90, '-'));
    open c_2;
        loop
            fetch c_2 into v_emp_rec;
            exit when c_2%notfound;
            if v_emp_rec.etype = 'FT' then v_type_format := 'Full-Time'; end if; 
            if v_emp_rec.etype = 'PT' then v_type_format := 'Part-Time'; end if; 
            if v_emp_rec.estatus = 'AC' then v_status_format := 'Active'; end if; 
            if v_emp_rec.estatus = 'IN' then v_status_format := 'Inactive'; end if; 
            DBMS_OUTPUT.PUT_LINE(rpad(v_emp_rec.lname || ', ' || v_emp_rec.fname, 20) || rpad(v_emp_rec.eid, 10) 
            || rpad(v_status_format, 15)  || rpad(v_type_format,15) || rpad(v_emp_rec.pilot, 30));
        end loop;
        close c_2;
    end if;
end;     


-----MOST POPULAR BIRTHDAYS-----

The T_BIRTHDAY table consists of every day of the year, from January 1 to December 31, along with a ranking based on how many babies were born in the United States on that date between 1973 and 1999. Rank 1 is the most popular, rank 2 is the next most popular, and so forth.

Write a PL/SQL anonymous block that accepts an integer n from the user input and performs the following tasks:
•	If n != -1 and n != 1, display an error message “Invalid number!”.
•	If n = 1, display the most popular birthdays along with the ranks for each month. Sort your output in ascending order by months.
•	If n = -1, display the least popular birthdays along with the ranks for each. Sort your output in ascending order by months.

-----Solution------


accept p_1 prompt 'Please enter an integer:';
Declare
    v_n     Number := &p_1;
    v_mon   t_birthday.b_month%type;
    v_maxr  t_birthday.b_rank%type;
    v_maxd  t_birthday.b_day%type;
Begin
    if v_n = -1 then
        DBMS_OUTPUT.PUT_LINE(rpad('Month', 10) || rpad('Least Popular Birthdays (Day/Rank)', 60) );
        DBMS_OUTPUT.PUT_LINE(rpad('-', 45, '-'));
        for idx in 1..12 loop
            select b_month,
            max(b_rank)
            into v_mon, v_maxr
            from t_birthday
            where b_month = idx 
            group by b_month;
            
            select b_day
            into v_maxd
            from t_birthday
            where b_month = idx and b_rank = v_maxr;
            DBMS_OUTPUT.PUT_LINE(lpad(v_mon, 5) || lpad(TO_CHAR(v_maxd, '09'), 10) || '/' || trim(to_char(v_maxr, '099')));
        end loop;
    elsif v_n = 1 then
        DBMS_OUTPUT.PUT_LINE(rpad('Month', 10) || rpad('Most Popular Birthdays (Day/Rank)', 60) );
        DBMS_OUTPUT.PUT_LINE(rpad('-', 45, '-'));
        for idx in 1..12 loop
        select b_month,
        min(b_rank)
        into v_mon, v_maxr
        from t_birthday
        where b_month = idx 
        group by b_month;
        
        select b_day
        into v_maxd
        from t_birthday
        where b_month = idx and b_rank = v_maxr;
        
        DBMS_OUTPUT.PUT_LINE(lpad(v_mon, 5) || lpad(TO_CHAR(v_maxd, '09'), 10) || '/' || trim(to_char(v_maxr, '099')));
        end loop;
    else
        DBMS_OUTPUT.PUT_LINE('Invalid Number!');
    end if;
end;


-----EMPLOYEE ID DATA RETRIEVAL-----

write a PL/SQL program that accepts an employee ID from the user input and displays 1) the employee's name, job title, hire date, and salary,  2) the employee's supervisor ID and name, 3) the name and location of the department where the employee works, 4) the number of employees in the department where the employee works, and 5) all employees (alone with their job titles, hire dates, and salary) who work in the same department as the given employee and were hired after the given employee (or “******”).  Sort your output by the employee name.

•	Hard coding (e.g., IF v_emp_id  = 7596 THEN v_1 := ...) will receive 0 points.
•	If the given employee does not have a supervisor, the supervisor ID and name are shown as “” in your output.
•	If the given employee does not belong to any department, the name and location of the department are shown as “******” in your output. The number of employees in the department is shown as 0.
•	If there is no employees who work in the same department as the given employee and were hired after the given employee, you display “******” in your output. 
•	You will lose 10 points if the title lines are missing in your output.
•	You will lose 10 points if your output is not in the correct format.
•	Your program must display the salary with a dollar ($) sign, a comma, and two decimal places (e.g., $1,234.56). 
•	You will receive 0 points if you submit more than one PL/SQL program. 

To avoid complicating issues, you can assume that the user always enters input from keyboard that consists only of the digits 0 through 9, plus (+) or minus (-) sign, and Enter. 

-----Solution------

Accept p_1 PROMPT 'Please enter the employee ID:'
DECLARE
    v_hire_date EMPLOYEE.HIRE_DATE%type;
    cursor c_1 (p_department_id Number, p_hire_date DATE) is
        select      employee_name, job_title, hire_date, salary
        from        employee
        where       department_id = p_department_id and hire_date > p_hire_date
        order by employee_name;
    v_input_id      NUMBER := &p_1;
    v_emp_name      employee.employee_name%TYPE;
    v_emp_sal       employee.salary%type;
    v_job_title     employee.job_title%type;
    v_dept_id       department.department_id%type;
    v_dept_name     department.department_name%type;
    v_dept_loc      department.location%type;
    v_num_of_emp    number :=0;
    v_n             NUMBER;
    v_supv_id       employee.supervisor_id%type;
    v_cur_sup_id    employee.supervisor_id%type;
    v_supv_name     employee.employee_name%TYPE;
begin
    Select  count(*)
    into v_n
    from employee
    where employee_id = V_INPUT_ID;
    
     IF v_n = 1 THEN
        SELECT 	UPPER(employee_name), job_title, hire_date, salary, supervisor_id, department_id
        INTO 		v_emp_name, v_job_title, v_hire_date, v_emp_sal, v_supv_id, v_dept_id
        FROM 		employee
        WHERE		employee_id = v_input_id;
       
        if v_supv_id is not null then
            select employee_name, employee_id
            into    v_supv_name, v_supv_id
            from employee
            where employee_id = v_supv_id;
        end if;
       
        if v_dept_id is not null then
            select department_name, location
            into v_dept_name, v_dept_loc            
            from department
            where department_id = v_dept_id;
            select count(*)
            into v_num_of_emp
            from employee
            where department_id = v_dept_id;
        end if;
        DBMS_OUTPUT.PUT_LINE('User Input:' || V_INPUT_ID);
        DBMS_OUTPUT.PUT_LINE(rpad('-', 40,'-'));
        DBMS_OUTPUT.PUT_LINE('(1)');
        DBMS_OUTPUT.PUT_LINE(RPAD('Employee Name:', 25) || UPPER(v_emp_name));
        DBMS_OUTPUT.PUT_LINE(RPAD('Job Title:', 25) || UPPER(v_job_title));
        DBMS_OUTPUT.PUT_LINE(RPAD('Hire Date:', 25) || UPPER(TO_CHAR(v_hire_date, 'DD-MON-YY')));
        DBMS_OUTPUT.PUT_LINE(RPAD('Total Pay:', 25) || TRIM(TO_CHAR(v_emp_sal, '$99,990.00')));
        DBMS_OUTPUT.PUT_LINE('(2)');
        DBMS_OUTPUT.PUT_LINE(RPAD('Supervisor ID:', 25) || NVL(to_char(v_supv_id), '******'));
        DBMS_OUTPUT.PUT_LINE(RPAD('Supervisor Name:', 25) || NVL(UPPER(v_supv_name), '******'));    
        DBMS_OUTPUT.PUT_LINE('(3)');
        DBMS_OUTPUT.PUT_LINE(RPAD('Department Name:', 25) || NVL(UPPER(v_dept_name), '******'));
        DBMS_OUTPUT.PUT_LINE(RPAD('Department Location:', 25) || NVL(UPPER(v_dept_loc), '******'));
        DBMS_OUTPUT.PUT_LINE('(4)');
        DBMS_OUTPUT.PUT_LINE(RPAD('Number of Employees:', 25) || to_char(NVL(v_num_of_emp, '0')));
        DBMS_OUTPUT.PUT_LINE('(5)');
        if v_num_of_emp != 0 then
            open c_1(v_dept_id, v_hire_date);
            fetch c_1 into v_emp_name, v_job_title, v_hire_date, v_emp_sal;
            if c_1%found then
            while c_1%found  loop
                DBMS_OUTPUT.PUT_LINE(RPAD('Employee Name:', 25) || UPPER(v_emp_name));
                DBMS_OUTPUT.PUT_LINE(RPAD('Job Title:', 25) || UPPER(v_job_title));
                DBMS_OUTPUT.PUT_LINE(RPAD('Hire Date:', 25) || UPPER(TO_CHAR(v_hire_date, 'DD-MON-YY')));
                DBMS_OUTPUT.PUT_LINE(RPAD('Total Pay:', 25) || TRIM(TO_CHAR(v_emp_sal, '$99,990.00')));
                fetch c_1 into v_emp_name, v_job_title, v_hire_date, v_emp_sal;
            end loop;
            close c_1;
            else 
                  DBMS_OUTPUT.PUT_LINE('******');
            end if;
       else
        DBMS_OUTPUT.PUT_LINE('******');
        end if;
    else
        DBMS_OUTPUT.PUT_LINE('User Input:' || V_INPUT_ID);
        DBMS_OUTPUT.PUT_LINE(rpad('-', 40,'-'));
        DBMS_OUTPUT.PUT_LINE(v_input_id || ' is not in the employee table');
    end if;
end;

-----VIDEO STORE RENTAL CHECKOUT USING PLSQL-----

Create a procedure called proc_video_checkout to record a new video rental. When the video is successfully checked out, you need to insert a new row (record) into the T_RENTAL table and update the corresponding row (record) in the T_COPY table. Otherwise, the action is denied. 

-----PARAMATERS-----

•	The value of p_CustomerID is not in the CustomerID column of the T_CUSTOMER table.
•	The customer is not active. 
•	The copy is not available (Status != 'A').
•	The value of p_CheckoutDate is greater than the current date. 
•	Checkout periods are determined by the values in the MaximumRentalDays column. The due date is p_CheckoutDate plus the corresponding MaximumRentalDays. Hard coding (e.g., 3, 7, or 14) is not allowed. 
•	A customer may have up to five (5) copies checked out at any one time. 
(For example, Tom has five copies checked out; he cannot rent a copy before he returns one of the five copies he checked out.) 


-----Solution------


create or replace PROCEDURE proc_video_checkout
(	
    p_CustomerID		VARCHAR2, 
	p_CopyID 			VARCHAR2, 
	p_CheckoutDate 		DATE 
)
as 
    v_n             number;
    v_active        t_customer.active%type;
    v_status        t_copy.status%type;
    v_videoid       t_video.videoid%type;
    v_max           T_VIDEO.MAXIMUMRENTALDAYS%type;
    v_totaldats     number :=0;
    v_duedate       date;
    v_currentrental number:=0;
begin
    SELECT 	COUNT(*)
    INTO		v_n
    FROM		T_CUSTOMER
    WHERE		UPPER(CustomerID) = UPPER(p_CustomerID);
    
    IF v_n = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: Invalid p_CustomerID!');
        RETURN;
    END IF;
    
    SELECT 	COUNT(*)
    INTO		v_n
    FROM		t_copy
    WHERE		UPPER(copyid) = UPPER(p_copyid);
    IF v_n = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: Invalid copyID!');
        RETURN;
    END IF;
    
    select active
    into v_active
    from t_customer
    where UPPER(CustomerID) = UPPER(p_CustomerID);
    
    if v_active = 'N' then
        DBMS_OUTPUT.PUT_LINE('Error: Customer '|| p_customerid || ' is not active.' );
        RETURN;
    end if;
    
    select status 
    into v_status
    from t_copy
    where upper(p_copyid) = upper(copyid);
    if upper(v_status) != 'A' then
        DBMS_OUTPUT.PUT_LINE('Error: Copy not Available ');
        return;
    end if;
    
    if p_checkoutdate > sysdate then
        DBMS_OUTPUT.PUT_LINE('Error: Checkout date is greater than the current date');
        return;
    end if;
    
    select count(*)
    into v_currentrental
    from t_rental
    where customerid = upper(p_customerid) and returndate is null;
    
    if v_currentrental >= 5 then
        dbms_output.put_line('Error: CustomerID: ' || p_customerid || ' already has the maximum amount of rentals checked out');
        return;
    end if;
    
    select videoid
    into v_videoid
    from t_copy
    where copyid = upper(p_copyid) and status = 'A';
    
    
    select maximumrentaldays
    into v_max
    from t_video
    where videoid = v_videoid;
    
    v_duedate := p_checkoutdate + v_max;

    insert into t_rental(customerid, copyid, checkoutdate, duedate)
    values(upper(p_customerid), upper(p_copyid), p_checkoutdate, v_duedate);
    update  t_copy
    set status = 'R'
    where copyid = upper(p_copyid);
    commit;
    DBMS_OUTPUT.PUT_LINE(p_copyid || ' succesfully checked out.');

end;
